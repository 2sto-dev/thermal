"""
Django settings for goGAS project.

Generated by 'django-admin startproject' using Django 5.1.2.
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv



# ðŸ“Œ Construim calea de bazÄƒ a proiectului
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / ".env")



# ðŸ“Œ Securitate
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "insecure-dev-key")
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() in ["1", "true", "yes", "on"]


# ðŸ“Œ Permitem accesul din reÈ›ea localÄƒ
ALLOWED_HOSTS = [h.strip() for h in os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",") if h.strip()]

CSRF_TRUSTED_ORIGINS = [o.strip() for o in os.getenv("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",") if o.strip()]

# ðŸ“Œ AplicaÈ›iile instalate

INSTALLED_APPS = [
    "admin_interface",  # Trebuie sÄƒ fie PRIMA aplicaÈ›ie custom
    "colorfield",  # NecesitÄƒ aceastÄƒ dependenÈ›Äƒ
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "solicitari",
    "adrese",
    "beneficiari",
    "raportare",
    "servicii",
    "rest_framework",  # Django REST Framework
    "rest_framework_simplejwt",  # JWT Authentication
    "dal",
    "dal_select2",
    "django_bootstrap5",
    "whitenoise.runserver_nostatic",  # pentru staticfiles Ã®n dev
]


# ðŸ“Œ Middleware-uri Django
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ðŸ“Œ Configurare URL principal
ROOT_URLCONF = "goGAS.urls"

# ðŸ“Œ Configurare Templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # AsigurÄƒ-te cÄƒ aceastÄƒ linie existÄƒ
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                                "django.template.context_processors.media",  # pentru MEDIA_URL
                "goGAS.context_processors.google_maps_api_key",
            ],
        },
    },
]


# ðŸ“Œ Configurare WSGI
WSGI_APPLICATION = "goGAS.wsgi.application"

# ðŸ“Œ Configurare baza de date
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DJANGO_DB_ENGINE", "django.db.backends.mysql"),
        "NAME": os.getenv("DJANGO_DB_NAME", "stargas"),
        "USER": os.getenv("DJANGO_DB_USER", "root"),
        "PASSWORD": os.getenv("DJANGO_DB_PASSWORD", ""),
        "HOST": os.getenv("DJANGO_DB_HOST", "localhost"),
        "PORT": os.getenv("DJANGO_DB_PORT", "3306"),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

# ðŸ“Œ Validatori pentru parole
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ðŸ“Œ Configurare limbÄƒ È™i fus orar
LANGUAGES = [("ro", "RomÃ¢nÄƒ"), ("en", "English")]
TIME_ZONE = "Europe/Bucharest"
USE_I18N = True
USE_TZ = True

# ðŸ“Œ Configurare fiÈ™iere statice
STATIC_URL = "/static/"
if DEBUG:
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
else:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"

# ðŸ“Œ Configurare fiÈ™iere media
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ðŸ“Œ Configurare Django REST Framework È™i autentificare JWT
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

# ðŸ“Œ Configurare JSON Web Token (JWT)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
}

# ðŸ“Œ Tip implicit pentru cheile primare
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Google Maps API Key (expus prin context processor)
GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY", "")


