"""
Django settings for goGAS project.

Generated by 'django-admin startproject' using Django 5.1.2.
"""

from pathlib import Path
import sys
import os
from datetime import timedelta

# ðŸ“Œ Construim calea de bazÄƒ a proiectului
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(os.path.join(BASE_DIR, "venv", "Lib"))

# ðŸ“Œ Securitate
SECRET_KEY = "django-insecure-b_37lczy0e_*i*0nyw1j9oss3*h0ol#gs(=-2dw2*r=6(&zfsb"
DEBUG = True

# ðŸ“Œ Permitem accesul din reÈ›ea localÄƒ
ALLOWED_HOSTS = ["localhost", "172.16.0.105", "*"]

# ðŸ“Œ AplicaÈ›iile instalate
INSTALLED_APPS = [
    "admin_interface",  # Trebuie sÄƒ fie PRIMA aplicaÈ›ie custom
    "colorfield",  # NecesitÄƒ aceastÄƒ dependenÈ›Äƒ
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "solicitari",
    "adrese",
    "beneficiari",
    "raportare",
    "axios",
    "rest_framework",  # Django REST Framework
    "rest_framework_simplejwt",  # JWT Authentication
    "dal",
    "dal_select2",
]

# ðŸ“Œ Middleware-uri Django
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ðŸ“Œ Configurare URL principal
ROOT_URLCONF = "goGAS.urls"
LOGIN_REDIRECT_URL = (
    "/admin/dashboard/"  # Utilizatorii autentificaÈ›i sunt trimiÈ™i la dashboard
)

# ðŸ“Œ Configurare Templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # AsigurÄƒ-te cÄƒ aceastÄƒ linie existÄƒ
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ðŸ“Œ Configurare WSGI
WSGI_APPLICATION = "goGAS.wsgi.application"

# ðŸ“Œ Configurare baza de date (foloseÈ™te variabile de mediu pentru parola)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",  # Motorul bazei de date
        "NAME": "stargas",  # Numele bazei de date
        "USER": "root",  # Numele utilizatorului de MySQL
        "PASSWORD": os.getenv(
            "DJANGO_DB_PASSWORD", "egoqwedc/12"
        ),  # FoloseÈ™te variabilÄƒ de mediu
        "HOST": "localhost",  # Adresa hostului, de obicei 'localhost'
        "PORT": "3306",  # Portul MySQL, implicit 3306
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}

# ðŸ“Œ Validatori pentru parole
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# ðŸ“Œ Configurare limbÄƒ È™i fus orar
LANGUAGES = [
    ("ro", "RomÃ¢nÄƒ"),
    ("en", "English"),
]
TIME_ZONE = "Europe/Bucharest"
USE_I18N = True
USE_TZ = True

# ðŸ“Œ Configurare fiÈ™iere statice
STATIC_URL = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATICFILES_DIRS = [BASE_DIR / "static"]  # AsigurÄƒ-te cÄƒ `static/` existÄƒ
STATIC_ROOT = BASE_DIR / "staticfiles"
# ServeÈ™te fiÈ™ierele statice mai rapid
INSTALLED_APPS += ["whitenoise.runserver_nostatic"]
MIDDLEWARE.insert(1, "whitenoise.middleware.WhiteNoiseMiddleware")

# ðŸ“Œ Configurare fiÈ™iere media
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ðŸ“Œ Configurare Django REST Framework È™i autentificare JWT
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # API-ul necesitÄƒ autentificare
    ),
}

# ðŸ“Œ Configurare JSON Web Token (JWT)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),  # ðŸ”¹ Tokenul de acces expirÄƒ Ã®n 1 orÄƒ
    "REFRESH_TOKEN_LIFETIME": timedelta(
        days=7
    ),  # ðŸ”¹ Refresh token-ul este valid 7 zile
    "ROTATE_REFRESH_TOKENS": True,
}

# ðŸ“Œ RedirecÈ›ionare dupÄƒ login (ex: la Admin solicitari)
LOGIN_REDIRECT_URL = "/admin/solicitari/"

# ðŸ“Œ Tip implicit pentru cheile primare
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"