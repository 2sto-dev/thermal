from django.db import models


class Judet(models.Model):
    cod = models.IntegerField(primary_key=True)
    nume = models.CharField(max_length=255, unique=True, db_column='denumire')

    class Meta:
        managed = False
        db_table = 'adrese_judet'
        verbose_name = "Adaugă Județ"
        verbose_name_plural = "Adaugă Județe"

    def __str__(self):
        return self.nume


class TipLocalitate(models.Model):
    cod = models.CharField(max_length=10, primary_key=True)
    denumire = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'adrese_tiplocalitate'

    def __str__(self):
        return self.denumire


class Localitate(models.Model):
    cod = models.IntegerField(primary_key=True)
    cod_politie = models.IntegerField(null=True, blank=True)
    denumire = models.CharField(max_length=255)
    den_scurta = models.CharField(max_length=50, null=True, blank=True)
    cod_postal = models.CharField(max_length=20, null=True, blank=True)
    loc_cod = models.IntegerField(null=True, blank=True)  # e o valoare, nu FK
    are_primarie = models.BooleanField()
    cod_fiscal_primarie = models.CharField(max_length=50, null=True, blank=True)
    cod_politie_tata = models.IntegerField(null=True, blank=True)
    sar_cod_mf = models.CharField(max_length=10, null=True, blank=True)

    judet = models.ForeignKey(
        Judet, on_delete=models.DO_NOTHING, db_column='judet_id'
    )
    loc_jud_cod = models.ForeignKey(
        'self', on_delete=models.DO_NOTHING,
        db_column='loc_jud_cod_id', null=True, blank=True
    )
    tip_localitate = models.ForeignKey(
        TipLocalitate, on_delete=models.DO_NOTHING,
        db_column='tip_localitate_id', null=True, blank=True
    )

    class Meta:
        managed = False
        db_table = 'adrese_localitate'
        verbose_name = "Adaugă Localități"
        verbose_name_plural = "Adaugă Localități"

    def __str__(self):
        return self.denumire


class Artera(models.Model):
    cod = models.IntegerField(primary_key=True)
    cod_politie = models.IntegerField(null=True, blank=True)
    denumire = models.CharField(max_length=255)
    cod_postal = models.CharField(max_length=20, null=True, blank=True)

    loc_jud_cod = models.ForeignKey(
        Judet, on_delete=models.DO_NOTHING,
        db_column='loc_jud_cod_id'
    )
    loc_cod = models.ForeignKey(
        Localitate, on_delete=models.DO_NOTHING,
        db_column='loc_cod_id'
    )
    stare = models.CharField(max_length=10, null=True, blank=True, db_column='stare_id')
    tip_artera = models.CharField(max_length=10, null=True, blank=True, db_column='tip_artera_id')

    class Meta:
        managed = False
        db_table = 'adrese_artera'
        verbose_name = "Adaugă Arteră"
        verbose_name_plural = "Adaugă Artere"

    def __str__(self):
        return self.denumire


class CodPostal(models.Model):
    localitate = models.ForeignKey(
        Localitate, on_delete=models.DO_NOTHING,
        db_column='loc_cod', related_name='coduri_postale'
    )
    loc_jud_cod = models.CharField(max_length=40)
    cod = models.BigIntegerField(null=True, blank=True)
    bloc = models.CharField(max_length=40)
    cod_postal = models.BigIntegerField(null=True, blank=True)

    class Meta:
        managed = False
        db_table = 'adrese_codpostal'

    def __str__(self):
        return str(self.cod_postal)


class RelatiiLocalitati(models.Model):
    localitate = models.ForeignKey(
        Localitate, on_delete=models.DO_NOTHING,
        db_column='loc_cod', related_name='relatii'
    )
    loc_jud_cod_nou = models.IntegerField()
    loc_cod_nou = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'adrese_relatii_localitati'

    def __str__(self):
        return f"Relație {self.localitate.cod} → {self.loc_cod_nou}"
