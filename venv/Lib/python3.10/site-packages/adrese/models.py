from django.db import models


# 1. JudeÈ›ele din RomÃ¢nia
class Judet(models.Model):
    cod = models.IntegerField(primary_key=True)
    denumire = models.CharField(max_length=255)
    ordine = models.IntegerField()
    auto = models.CharField(max_length=10)

    def __str__(self):
        return self.denumire


# 2. Tipuri de localitÄƒÈ›i (comunÄƒ, municipiu, sat, etc.)
class TipLocalitate(models.Model):
    cod = models.CharField(max_length=10, primary_key=True)
    denumire = models.CharField(max_length=255)

    def __str__(self):
        return self.denumire


# 3. LocalitÄƒÈ›ile din RomÃ¢nia
class Localitate(models.Model):
    cod = models.IntegerField(primary_key=True)
    judet = models.ForeignKey(Judet, on_delete=models.CASCADE, related_name="localitati")
    cod_politie = models.IntegerField(null=True, blank=True)
    denumire = models.CharField(max_length=255)
    tip_localitate = models.ForeignKey(TipLocalitate, on_delete=models.SET_NULL, null=True, blank=True, related_name="localitati")
    den_scurta = models.CharField(max_length=50, null=True, blank=True)
    cod_postal = models.CharField(max_length=20, null=True, blank=True)
    loc_jud_cod = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, related_name="sub_localitati")
    loc_cod = models.IntegerField(null=True, blank=True)
    are_primarie = models.BooleanField(default=False)
    cod_fiscal_primarie = models.CharField(max_length=50, null=True, blank=True)
    cod_politie_tata = models.IntegerField(null=True, blank=True)
    sar_cod_mf = models.CharField(max_length=10, null=True, blank=True)

    def __str__(self):
        return self.denumire  # ðŸ”¹ EliminÄƒ judeÈ›ul din afiÈ™are


# 4. StÄƒrile arterelor (activÄƒ, desfiinÈ›atÄƒ, etc.)
class StareArtera(models.Model):
    cod = models.CharField(max_length=10, primary_key=True)
    nume_stare = models.CharField(max_length=255)

    def __str__(self):
        return self.nume_stare


# 5. Tipuri de artere (stradÄƒ, alee, bulevard, etc.)
class TipArtera(models.Model):
    cod = models.CharField(max_length=10, primary_key=True)
    denumire = models.CharField(max_length=255)

    def __str__(self):
        return self.denumire


# 6. Arterele (strÄƒzi, bulevarde)
class Artera(models.Model):
    cod = models.IntegerField(primary_key=True)
    loc_jud_cod = models.ForeignKey(Judet, on_delete=models.CASCADE, related_name="artere_judet")
    loc_cod = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="artere_localitate")
    cod_politie = models.IntegerField(null=True, blank=True)
    denumire = models.CharField(max_length=255)
    stare = models.ForeignKey(StareArtera, on_delete=models.SET_NULL, null=True, blank=True, related_name="artere_stare")
    tip_artera = models.ForeignKey(TipArtera, on_delete=models.SET_NULL, null=True, blank=True, related_name="artere_tip")
    cod_postal = models.CharField(max_length=20, null=True, blank=True)

    def __str__(self):
        return self.denumire  # ðŸ”¹ EliminÄƒ localitatea din afiÈ™are


# 7. Istoricul arterelor
class ArteraIstoric(models.Model):
    artera_cod = models.ForeignKey(Artera, on_delete=models.CASCADE, related_name="istoric_artera")
    loc_jud_cod = models.ForeignKey(Judet, on_delete=models.CASCADE, related_name="istoric_artere_judet")
    loc_cod = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="istoric_artere_localitate")
    denumire = models.CharField(max_length=255)
    data = models.DateField()

    def __str__(self):
        return f"Istoric {self.artera_cod.denumire} ({self.data})"


# 8. RelaÈ›ii Ã®ntre artere (cÃ¢nd o stradÄƒ devine parte din alta)
class ArteraRelatie(models.Model):
    artera_cod_vechi = models.ForeignKey(Artera, on_delete=models.CASCADE, related_name="artere_vechi")
    artera_cod_nou = models.ForeignKey(Artera, on_delete=models.CASCADE, related_name="artere_noi")
    data = models.DateField()

    def __str__(self):
        return f"RelaÈ›ie Ã®ntre {self.artera_cod_vechi} È™i {self.artera_cod_nou} ({self.data})"


# 9. RelaÈ›ii Ã®ntre localitÄƒÈ›i (fuzionare, alipire)
class LocalitateRelatie(models.Model):
    loc_cod = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="relatii_locatie")
    loc_cod_nou = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="localitati_noi")

    def __str__(self):
        return f"RelaÈ›ie Ã®ntre {self.loc_cod} È™i {self.loc_cod_nou}"


# 10. Istoricul localitÄƒÈ›ilor
class LocalitateIstoric(models.Model):
    loc_cod = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="istoric_localitati")
    denumire = models.CharField(max_length=255)
    data = models.DateField()
    jud_cod_tata = models.ForeignKey(Judet, on_delete=models.CASCADE, related_name="judete_tata")
    cod_tata = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="localitati_tata")

    def __str__(self):
        return f"Istoric pentru {self.denumire} ({self.data})"


# 11. Coduri PoÈ™tale pentru alte strÄƒzi
class CodPostalAlteStrazi(models.Model):
    loc_cod = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="cod_postal_alte_strazi_localitate")
    cod = models.IntegerField(primary_key=True)
    bloc = models.CharField(max_length=50, null=True, blank=True)
    cod_postal = models.CharField(max_length=20)

    def __str__(self):
        return f"Cod postal {self.cod_postal} - Localitate: {self.loc_cod.denumire}"


# 12. Coduri PoÈ™tale pentru numere de strÄƒzi
class CodPostalNumarStrazi(models.Model):
    loc_cod = models.ForeignKey(Localitate, on_delete=models.CASCADE, related_name="cod_postal_numar_strazi_localitate")
    cod = models.IntegerField(primary_key=True)
    numar_start = models.IntegerField()
    numar_sfarsit = models.IntegerField()
    paritate = models.CharField(max_length=10)
    cod_postal = models.CharField(max_length=20)

    def __str__(self):
        return f"Cod postal {self.cod_postal} - {self.numar_start}-{self.numar_sfarsit} ({self.paritate})"

class TaraValuta(models.Model):
    cod = models.IntegerField(primary_key=True)
    stare = models.CharField(max_length=50, null=True, blank=True)
    capitala = models.CharField(max_length=255, null=True, blank=True)
    denumire = models.CharField(max_length=255)
    forma_guvern = models.CharField(max_length=255, null=True, blank=True)
    cod_tara_fiscal = models.CharField(max_length=50, null=True, blank=True)
    cod_bnr = models.CharField(max_length=50, null=True, blank=True)
    valuta = models.CharField(max_length=50, null=True, blank=True)
    cedi = models.CharField(max_length=50, null=True, blank=True)
    cod_sm = models.CharField(max_length=50, null=True, blank=True)
    ue = models.BooleanField(default=False)  # Aderare la UE (True/False)

    def __str__(self):
        return self.denumire
